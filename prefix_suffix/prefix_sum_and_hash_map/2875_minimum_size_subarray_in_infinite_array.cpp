#include <numeric>
#include <vector>

/**
 * You are given a 0-indexed array nums and an integer target.
 *
 * A 0-indexed array infinite_nums is generated by infinitely appending the elements of nums to
 * itself.
 *
 * Return the length of the shortest subarray of the array infinite_nums with a sum equal to target.
 * If there is no such subarray return -1.
 *
 * ! 1 <= nums.length <= 10^5
 * ! 1 <= nums[i] <= 10^5
 * ! 1 <= target <= 10^9
 */

class Solution
{
public:
    int minSizeSubarray(std::vector<int>& nums, int target)
    {
        const int n = nums.size();
        const long long total = std::accumulate(nums.begin(), nums.end(), 0LL);
        const long long remainder = target % total;
        long long sum = 0;
        int result = INT_MAX;
        for (int left = 0, right = 0; right < 2 * n; ++right) {
            sum += nums[right % n];
            while (sum > remainder) {
                sum -= nums[left % n];
                left++;
            }
            if (sum == remainder) {
                result = std::min(result, right - left + 1);
            }
        }
        return result == INT_MAX ? -1 : result + target / total * n;
    }
};